.----------------------------------------.
|  Dec 10th, 2016                        |
|   Functions Part 1                     |
|   Creating and working with functions  |
|                                        |
'----------------------------------------'

# Functions allow for code re-use and make programs easier to read and maintain.
# To create a function, you need to define it:

>>> def hello_world():
...   print("hello world")
... 
>>> hello_world()
hello world


# Functions return a value when run. You can assign this value to a function.
#  When no return statement is used, nothing ends up returned. The return value 
#  ends the function and returns whatever value it is told to.

>>> a = hello_world()
hello world
>>> type(a)
<class 'NoneType'>
>>> def hello_world():
...   print("Hello")
...   print("world")
...   return True
... 
>>> a = hello_world()
Hello
world
>>> a
True


# Docstrings:
#  Part of a function that returns documentation about a function.

>>> def hello_world():
...   '''
...   This is a docstring for hello world
...   it takes no variables
... 
...   and returns True
...   '''
...   print('Hello World')
...   return True
... 
>>> help(hello_world)
Help on function hello_world in module __main__:

hello_world()
    This is a docstring for hello world
    it takes no variables
    
    and returns True


# Passing arguments to a function
#  By default, a function maps variables by position. Values can be assigned 
#  explicitly though

>>> def a_sum(x, y):
...   return x+y
>>> a_sum(5, 10)
15
>>> a_sum('str','ing')
'string'
>>> a_sum([1, 2, 3], [4, 5, 6])
[1, 2, 3, 4, 5, 6]
>>> a_sum(y='str', x='ing')
'ingstr'


# Positional argumemts must come first, named must come last. The order of named 
#  arguments doesn't matter.


>>> def a_sum(x, y, z):
...   return x+y+z
... 
>>> a_sum(5, 10, 15)
30
>>> a_sum(5, y=10, z=15)
30
>>> a_sum(5, z=10, y=15)
30
>>> a_sum(y=5, z=10, 15)
  File "<stdin>", line 1
SyntaxError: positional argument follows keyword argument

# Functions can also have pre-defined arguments. If a value isn't given as an argument,
#  the default will be used. This can be useful for expanding functions without breaking
#  existing functions.

>>> def a_sum(x, y, z=100):
...   return x+y+z
... 
>>> a_sum(5, 10, 15)
30
>>> a_sum(5, 10)
115







